
syntax = "proto3";

package datacake_api;

service ConsistencyApi {
  // Adds a document to the state.
  rpc put(PutPayload) returns (Empty);

  // Adds a set of documents to the state.
  rpc multi_put(MultiPutPayload) returns (Empty);

  // Removes a document from the state.
  rpc remove(RemovePayload) returns (Empty);

  // Removes a set of documents from the state.
  rpc multi_remove(MultiRemovePayload) returns (Empty);
}

service ReplicationApi {
  // Fetches the live state of the keyspace states.
  // This is a set keyspace and the timestamps that they were
  // last updated at.
  rpc poll_keyspace(Empty) returns (KeyspaceInfo);

  // Fetches a given ORSWOT set for a given keyspace.
  rpc get_state(GetState) returns (KeyspaceOrSwotSet);

  // Fetches a given set of documents in order to bring itself up to speed.
  rpc fetch_docs(FetchDocs) returns (FetchedDocs);
}

message PutPayload {
  string keyspace = 1;
  Document document = 2;
}

message MultiPutPayload {
  string keyspace = 1;
  repeated Document documents = 2;
}

message RemovePayload {
  string keyspace = 1;
  DocumentMetadata document = 2;
}

message MultiRemovePayload {
  string keyspace = 1;
  repeated DocumentMetadata documents = 2;
}

message KeyspaceInfo {
  // A mapping of a given keyspace and the timestamp of when it was last updated.
  bytes keyspace_timestamps = 1;
}

message GetState {
  // The keyspace to fetch the CRDT set from.
  string keyspace = 1;
}

message KeyspaceOrSwotSet {
  // The timestamp in which the keyspace was last updated.
  uint64 last_updated = 1;
  // The serialized data form of the keyspace orswot set.
  bytes set_data = 2;
}

message FetchDocs {
  // The keyspace to fetch the documents from.
  string keyspace = 1;
  // The set of document ids to fetch.
  repeated uint64 doc_ids = 2;
}

message FetchedDocs {
  // The returning set of documents with their applicable data and metadata.
  repeated Document documents = 1;
}

message Empty {};

/// A HLCTimestamp.
message Timestamp {
  uint64 millis = 1;
  uint32 counter = 2;
  uint32 node_id = 3;
}

message Document {
  DocumentMetadata metadata = 1;
  // The raw binary data of the document's value.
  bytes data = 2;
}

message DocumentMetadata {
  // The unique id of the document.
  uint64 id = 1;
  // The timestamp of when the document was last updated.
  Timestamp last_updated = 2;
}